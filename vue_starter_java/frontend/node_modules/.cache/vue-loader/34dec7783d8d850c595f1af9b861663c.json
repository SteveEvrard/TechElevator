{"remainingRequest":"/Users/eford/Development/final-capstone-team-hotel/vue_starter_java/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/eford/Development/final-capstone-team-hotel/vue_starter_java/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/eford/Development/final-capstone-team-hotel/vue_starter_java/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eford/Development/final-capstone-team-hotel/vue_starter_java/frontend/node_modules/vue-survey-builder/src/SurveyBuilder.vue?vue&type=template&id=74944e9d&scoped=true&","dependencies":[{"path":"/Users/eford/Development/final-capstone-team-hotel/vue_starter_java/frontend/node_modules/vue-survey-builder/src/SurveyBuilder.vue","mtime":499162500000},{"path":"/Users/eford/Development/final-capstone-team-hotel/vue_starter_java/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eford/Development/final-capstone-team-hotel/vue_starter_java/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/eford/Development/final-capstone-team-hotel/vue_starter_java/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eford/Development/final-capstone-team-hotel/vue_starter_java/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"vue-survey-builder-content vsb-content\" }, [\n    _c(\n      \"select\",\n      {\n        directives: [\n          {\n            name: \"model\",\n            rawName: \"v-model\",\n            value: _vm.selectedType,\n            expression: \"selectedType\"\n          }\n        ],\n        staticClass: \"vsb-select\",\n        on: {\n          change: [\n            function($event) {\n              var $$selectedVal = Array.prototype.filter\n                .call($event.target.options, function(o) {\n                  return o.selected\n                })\n                .map(function(o) {\n                  var val = \"_value\" in o ? o._value : o.value\n                  return val\n                })\n              _vm.selectedType = $event.target.multiple\n                ? $$selectedVal\n                : $$selectedVal[0]\n            },\n            function($event) {\n              return _vm.questionTypeChanged(_vm.selectedType)\n            }\n          ]\n        }\n      },\n      _vm._l(_vm.questionTypes, function(questionType, index) {\n        return _c(\n          \"option\",\n          {\n            key: index,\n            attrs: { disabled: questionType.value === \"DEFAULT\" },\n            domProps: {\n              value: questionType.value,\n              selected: questionType.value === \"DEFAULT\"\n            }\n          },\n          [_vm._v(_vm._s(questionType.label))]\n        )\n      }),\n      0\n    ),\n    _vm.selectedType !== \"DEFAULT\"\n      ? _c(\"div\", { staticClass: \"question-section\" }, [\n          _c(\"div\", { staticClass: \"pb-10\" }, [\n            _c(\"div\", { staticClass: \"vsb-choices-text\" }, [\n              _vm._v(\"Question\")\n            ]),\n            _c(\"input\", {\n              directives: [\n                {\n                  name: \"model\",\n                  rawName: \"v-model\",\n                  value: _vm.question.body,\n                  expression: \"question.body\"\n                }\n              ],\n              attrs: { type: \"text\", placeholder: \"Enter question text\" },\n              domProps: { value: _vm.question.body },\n              on: {\n                input: function($event) {\n                  if ($event.target.composing) {\n                    return\n                  }\n                  _vm.$set(_vm.question, \"body\", $event.target.value)\n                }\n              }\n            })\n          ]),\n          _vm.selectedType === \"BOOLEAN\"\n            ? _c(\n                \"div\",\n                {},\n                [\n                  _c(\"div\", { staticClass: \"vsb-choices-text\" }, [\n                    _vm._v(\"Answer Choices\")\n                  ]),\n                  _vm._l(_vm.question.options, function(option, index) {\n                    return _c(\"div\", { key: index }, [\n                      _c(\"div\", { staticClass: \"clear-both\" }, [\n                        _c(\"input\", {\n                          directives: [\n                            {\n                              name: \"model\",\n                              rawName: \"v-model\",\n                              value: option.body,\n                              expression: \"option.body\"\n                            }\n                          ],\n                          staticClass: \"width-100 float-left\",\n                          attrs: {\n                            type: \"text\",\n                            placeholder: \"Enter an answer choice\"\n                          },\n                          domProps: { value: option.body },\n                          on: {\n                            input: function($event) {\n                              if ($event.target.composing) {\n                                return\n                              }\n                              _vm.$set(option, \"body\", $event.target.value)\n                            }\n                          }\n                        }),\n                        index > 1\n                          ? _c(\n                              \"button\",\n                              {\n                                staticClass:\n                                  \"vsb-btn-link color-red width-10 mt-10\",\n                                on: {\n                                  click: function($event) {\n                                    return _vm.deleteQuestionOptionItem(\n                                      _vm.question.options,\n                                      index\n                                    )\n                                  }\n                                }\n                              },\n                              [_vm._v(\"Remove\")]\n                            )\n                          : _vm._e()\n                      ])\n                    ])\n                  })\n                ],\n                2\n              )\n            : _vm._e(),\n          _vm.selectedType === \"DATE\"\n            ? _c(\"div\", {}, [\n                _c(\"div\", {}, [\n                  _c(\"label\", { staticClass: \"vsb-block\" }, [\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.question.dateFormat,\n                          expression: \"question.dateFormat\"\n                        }\n                      ],\n                      attrs: { type: \"radio\", value: \"MM/DD/YY\" },\n                      domProps: {\n                        checked: _vm._q(_vm.question.dateFormat, \"MM/DD/YY\")\n                      },\n                      on: {\n                        change: function($event) {\n                          return _vm.$set(\n                            _vm.question,\n                            \"dateFormat\",\n                            \"MM/DD/YY\"\n                          )\n                        }\n                      }\n                    }),\n                    _vm._v(\" MM/DD/YY\")\n                  ]),\n                  _c(\"label\", { staticClass: \"vsb-block\" }, [\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.question.dateFormat,\n                          expression: \"question.dateFormat\"\n                        }\n                      ],\n                      attrs: { type: \"radio\", value: \"DD/MM/YY\" },\n                      domProps: {\n                        checked: _vm._q(_vm.question.dateFormat, \"DD/MM/YY\")\n                      },\n                      on: {\n                        change: function($event) {\n                          return _vm.$set(\n                            _vm.question,\n                            \"dateFormat\",\n                            \"DD/MM/YY\"\n                          )\n                        }\n                      }\n                    }),\n                    _vm._v(\" DD/MM/YY\")\n                  ]),\n                  _c(\"label\", { staticClass: \"vsb-block\" }, [\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.question.dateFormat,\n                          expression: \"question.dateFormat\"\n                        }\n                      ],\n                      attrs: { type: \"radio\", value: \"MM/DD/YYYY\" },\n                      domProps: {\n                        checked: _vm._q(_vm.question.dateFormat, \"MM/DD/YYYY\")\n                      },\n                      on: {\n                        change: function($event) {\n                          return _vm.$set(\n                            _vm.question,\n                            \"dateFormat\",\n                            \"MM/DD/YYYY\"\n                          )\n                        }\n                      }\n                    }),\n                    _vm._v(\" MM/DD/YYYY\")\n                  ]),\n                  _c(\"label\", { staticClass: \"vsb-block\" }, [\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.question.dateFormat,\n                          expression: \"question.dateFormat\"\n                        }\n                      ],\n                      attrs: { type: \"radio\", value: \"DD/MM/YYYY\" },\n                      domProps: {\n                        checked: _vm._q(_vm.question.dateFormat, \"DD/MM/YYYY\")\n                      },\n                      on: {\n                        change: function($event) {\n                          return _vm.$set(\n                            _vm.question,\n                            \"dateFormat\",\n                            \"DD/MM/YYYY\"\n                          )\n                        }\n                      }\n                    }),\n                    _vm._v(\" DD/MM/YYYY\")\n                  ])\n                ])\n              ])\n            : _vm._e(),\n          _vm.selectedType === \"MULTI_CHOICE\"\n            ? _c(\n                \"div\",\n                {},\n                [\n                  _c(\"div\", { staticClass: \"vsb-choices-text\" }, [\n                    _vm._v(\"Answer Choices\")\n                  ]),\n                  _vm._l(_vm.question.options, function(option, index) {\n                    return _c(\"div\", { key: index }, [\n                      _c(\"div\", { staticClass: \"clear-both\" }, [\n                        _c(\"input\", {\n                          directives: [\n                            {\n                              name: \"model\",\n                              rawName: \"v-model\",\n                              value: option.body,\n                              expression: \"option.body\"\n                            }\n                          ],\n                          staticClass: \"width-90 float-left\",\n                          attrs: {\n                            type: \"text\",\n                            placeholder: \"Enter an answer choice\"\n                          },\n                          domProps: { value: option.body },\n                          on: {\n                            input: function($event) {\n                              if ($event.target.composing) {\n                                return\n                              }\n                              _vm.$set(option, \"body\", $event.target.value)\n                            }\n                          }\n                        }),\n                        index > 1\n                          ? _c(\n                              \"button\",\n                              {\n                                staticClass:\n                                  \"vsb-btn-link color-red width-10 mt-10\",\n                                on: {\n                                  click: function($event) {\n                                    return _vm.deleteQuestionOptionItem(\n                                      _vm.question.options,\n                                      index\n                                    )\n                                  }\n                                }\n                              },\n                              [_vm._v(\"Remove\")]\n                            )\n                          : _vm._e()\n                      ])\n                    ])\n                  }),\n                  _c(\"div\", { staticClass: \"display-block\" }, [\n                    _c(\n                      \"button\",\n                      {\n                        staticClass: \"vsb-btn-link color-blue\",\n                        on: {\n                          click: function($event) {\n                            return _vm.addAnotherAnswer()\n                          }\n                        }\n                      },\n                      [_vm._v(\"Add another answer\")]\n                    )\n                  ])\n                ],\n                2\n              )\n            : _vm._e(),\n          _vm.selectedType === \"NUMBER\"\n            ? _c(\"div\", {}, [\n                _c(\"label\", { staticClass: \"display-block\" }, [\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.question.hasUnits,\n                        expression: \"question.hasUnits\"\n                      }\n                    ],\n                    attrs: { type: \"checkbox\", name: \"hasUnits\" },\n                    domProps: {\n                      checked: Array.isArray(_vm.question.hasUnits)\n                        ? _vm._i(_vm.question.hasUnits, null) > -1\n                        : _vm.question.hasUnits\n                    },\n                    on: {\n                      change: function($event) {\n                        var $$a = _vm.question.hasUnits,\n                          $$el = $event.target,\n                          $$c = $$el.checked ? true : false\n                        if (Array.isArray($$a)) {\n                          var $$v = null,\n                            $$i = _vm._i($$a, $$v)\n                          if ($$el.checked) {\n                            $$i < 0 &&\n                              _vm.$set(\n                                _vm.question,\n                                \"hasUnits\",\n                                $$a.concat([$$v])\n                              )\n                          } else {\n                            $$i > -1 &&\n                              _vm.$set(\n                                _vm.question,\n                                \"hasUnits\",\n                                $$a.slice(0, $$i).concat($$a.slice($$i + 1))\n                              )\n                          }\n                        } else {\n                          _vm.$set(_vm.question, \"hasUnits\", $$c)\n                        }\n                      }\n                    }\n                  }),\n                  _c(\"span\", {}, [\n                    _vm._v(\"Answer label \"),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.question.units,\n                          expression: \"question.units\"\n                        }\n                      ],\n                      staticClass: \"width-10\",\n                      attrs: {\n                        type: \"text\",\n                        placeholder: \"ex. mins, lbs, days\",\n                        disabled: !_vm.question.hasUnits\n                      },\n                      domProps: { value: _vm.question.units },\n                      on: {\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.$set(_vm.question, \"units\", $event.target.value)\n                        }\n                      }\n                    })\n                  ])\n                ]),\n                _c(\"label\", { staticClass: \"display-block\" }, [\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.question.hasMinMax,\n                        expression: \"question.hasMinMax\"\n                      }\n                    ],\n                    attrs: { type: \"checkbox\", name: \"subType\" },\n                    domProps: {\n                      checked: Array.isArray(_vm.question.hasMinMax)\n                        ? _vm._i(_vm.question.hasMinMax, null) > -1\n                        : _vm.question.hasMinMax\n                    },\n                    on: {\n                      change: function($event) {\n                        var $$a = _vm.question.hasMinMax,\n                          $$el = $event.target,\n                          $$c = $$el.checked ? true : false\n                        if (Array.isArray($$a)) {\n                          var $$v = null,\n                            $$i = _vm._i($$a, $$v)\n                          if ($$el.checked) {\n                            $$i < 0 &&\n                              _vm.$set(\n                                _vm.question,\n                                \"hasMinMax\",\n                                $$a.concat([$$v])\n                              )\n                          } else {\n                            $$i > -1 &&\n                              _vm.$set(\n                                _vm.question,\n                                \"hasMinMax\",\n                                $$a.slice(0, $$i).concat($$a.slice($$i + 1))\n                              )\n                          }\n                        } else {\n                          _vm.$set(_vm.question, \"hasMinMax\", $$c)\n                        }\n                      }\n                    }\n                  }),\n                  _c(\"span\", {}, [\n                    _vm._v(\"Min/max value\\n          \"),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.question.minValue,\n                          expression: \"question.minValue\"\n                        }\n                      ],\n                      staticClass: \"width-10\",\n                      attrs: {\n                        type: \"number\",\n                        placeholder: \"min\",\n                        min: \"1\",\n                        max: \"2048\",\n                        disabled: !_vm.question.hasMinMax\n                      },\n                      domProps: { value: _vm.question.minValue },\n                      on: {\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.$set(\n                            _vm.question,\n                            \"minValue\",\n                            $event.target.value\n                          )\n                        }\n                      }\n                    }),\n                    _c(\"span\", { staticClass: \"width-10\" }, [_vm._v(\"to\")]),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.question.maxValue,\n                          expression: \"question.maxValue\"\n                        }\n                      ],\n                      staticClass: \"width-10\",\n                      attrs: {\n                        type: \"number\",\n                        placeholder: \"max\",\n                        min: \"1\",\n                        max: \"2048\",\n                        disabled: !_vm.question.hasMinMax\n                      },\n                      domProps: { value: _vm.question.maxValue },\n                      on: {\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.$set(\n                            _vm.question,\n                            \"maxValue\",\n                            $event.target.value\n                          )\n                        }\n                      }\n                    })\n                  ])\n                ]),\n                _c(\"label\", { staticClass: \"display-block\" }, [\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.question.allowDecimals,\n                        expression: \"question.allowDecimals\"\n                      }\n                    ],\n                    attrs: {\n                      type: \"checkbox\",\n                      value: \"Single\",\n                      name: \"subType\"\n                    },\n                    domProps: {\n                      checked: Array.isArray(_vm.question.allowDecimals)\n                        ? _vm._i(_vm.question.allowDecimals, \"Single\") > -1\n                        : _vm.question.allowDecimals\n                    },\n                    on: {\n                      change: function($event) {\n                        var $$a = _vm.question.allowDecimals,\n                          $$el = $event.target,\n                          $$c = $$el.checked ? true : false\n                        if (Array.isArray($$a)) {\n                          var $$v = \"Single\",\n                            $$i = _vm._i($$a, $$v)\n                          if ($$el.checked) {\n                            $$i < 0 &&\n                              _vm.$set(\n                                _vm.question,\n                                \"allowDecimals\",\n                                $$a.concat([$$v])\n                              )\n                          } else {\n                            $$i > -1 &&\n                              _vm.$set(\n                                _vm.question,\n                                \"allowDecimals\",\n                                $$a.slice(0, $$i).concat($$a.slice($$i + 1))\n                              )\n                          }\n                        } else {\n                          _vm.$set(_vm.question, \"allowDecimals\", $$c)\n                        }\n                      }\n                    }\n                  }),\n                  _c(\"span\", {}, [_vm._v(\"Allow decimals\")])\n                ])\n              ])\n            : _vm._e(),\n          _vm.selectedType === \"SCALE\"\n            ? _c(\"div\", { staticClass: \"scale-type\" }, [\n                _c(\"div\", [_vm._v(\"Scale labels\")]),\n                _c(\"div\", {}, [\n                  _c(\"div\", { staticClass: \"display-inline-block\" }, [\n                    _vm._v(\"Intervals\")\n                  ]),\n                  _c(\"div\", { staticClass: \"intervals display-inline-block\" }, [\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.question.intervals,\n                          expression: \"question.intervals\"\n                        }\n                      ],\n                      attrs: { type: \"number\", min: \"2\", max: \"100\" },\n                      domProps: { value: _vm.question.intervals },\n                      on: {\n                        change: function($event) {\n                          return _vm.changeLabelsLength(_vm.question.intervals)\n                        },\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.$set(\n                            _vm.question,\n                            \"intervals\",\n                            $event.target.value\n                          )\n                        }\n                      }\n                    })\n                  ]),\n                  _vm.question.reportable\n                    ? _c(\"span\", {}, [\n                        _vm._v(\"Max of 100 intervals can be entered.\")\n                      ])\n                    : _vm._e()\n                ]),\n                _vm.question.intervals > 0\n                  ? _c(\n                      \"div\",\n                      _vm._l(_vm.question.labels, function(value, index) {\n                        return _c(\"div\", { key: index }, [\n                          index === 0\n                            ? _c(\"div\", [\n                                _c(\n                                  \"div\",\n                                  { staticClass: \"width-10 float-left pt-10\" },\n                                  [_vm._v(\"Top\")]\n                                ),\n                                _c(\"div\", { staticClass: \"width-90\" }, [\n                                  _c(\"input\", {\n                                    directives: [\n                                      {\n                                        name: \"model\",\n                                        rawName: \"v-model\",\n                                        value:\n                                          _vm.question.labels[\n                                            _vm.question.labels.length -\n                                              index -\n                                              1\n                                          ],\n                                        expression:\n                                          \"question.labels[question.labels.length - index - 1]\"\n                                      }\n                                    ],\n                                    attrs: {\n                                      type: \"text\",\n                                      placeholder: \"Enter value\"\n                                    },\n                                    domProps: {\n                                      value:\n                                        _vm.question.labels[\n                                          _vm.question.labels.length - index - 1\n                                        ]\n                                    },\n                                    on: {\n                                      input: function($event) {\n                                        if ($event.target.composing) {\n                                          return\n                                        }\n                                        _vm.$set(\n                                          _vm.question.labels,\n                                          _vm.question.labels.length -\n                                            index -\n                                            1,\n                                          $event.target.value\n                                        )\n                                      }\n                                    }\n                                  })\n                                ])\n                              ])\n                            : _vm.question.labels &&\n                              index === _vm.question.labels.length - 1\n                            ? _c(\"div\", [\n                                _c(\n                                  \"div\",\n                                  { staticClass: \"width-10 float-left pt-10\" },\n                                  [_vm._v(\"Bottom\")]\n                                ),\n                                _c(\"div\", { staticClass: \"width-90\" }, [\n                                  _c(\"input\", {\n                                    directives: [\n                                      {\n                                        name: \"model\",\n                                        rawName: \"v-model\",\n                                        value:\n                                          _vm.question.labels[\n                                            _vm.question.labels.length -\n                                              index -\n                                              1\n                                          ],\n                                        expression:\n                                          \"question.labels[question.labels.length - index - 1]\"\n                                      }\n                                    ],\n                                    attrs: {\n                                      type: \"text\",\n                                      name: \"vertical-labels\",\n                                      placeholder: \"Enter value\"\n                                    },\n                                    domProps: {\n                                      value:\n                                        _vm.question.labels[\n                                          _vm.question.labels.length - index - 1\n                                        ]\n                                    },\n                                    on: {\n                                      input: function($event) {\n                                        if ($event.target.composing) {\n                                          return\n                                        }\n                                        _vm.$set(\n                                          _vm.question.labels,\n                                          _vm.question.labels.length -\n                                            index -\n                                            1,\n                                          $event.target.value\n                                        )\n                                      }\n                                    }\n                                  })\n                                ])\n                              ])\n                            : _vm._e(),\n                          _vm.question.labels &&\n                          index !== 0 &&\n                          index !== _vm.question.labels.length - 1\n                            ? _c(\"div\", { staticClass: \"text-right\" }, [\n                                _c(\"div\", { staticClass: \"width-90\" }, [\n                                  _c(\"input\", {\n                                    directives: [\n                                      {\n                                        name: \"model\",\n                                        rawName: \"v-model\",\n                                        value:\n                                          _vm.question.labels[\n                                            _vm.question.labels.length -\n                                              index -\n                                              1\n                                          ],\n                                        expression:\n                                          \"question.labels[question.labels.length - index - 1]\"\n                                      }\n                                    ],\n                                    attrs: {\n                                      type: \"text\",\n                                      placeholder: \"Enter value\"\n                                    },\n                                    domProps: {\n                                      value:\n                                        _vm.question.labels[\n                                          _vm.question.labels.length - index - 1\n                                        ]\n                                    },\n                                    on: {\n                                      input: function($event) {\n                                        if ($event.target.composing) {\n                                          return\n                                        }\n                                        _vm.$set(\n                                          _vm.question.labels,\n                                          _vm.question.labels.length -\n                                            index -\n                                            1,\n                                          $event.target.value\n                                        )\n                                      }\n                                    }\n                                  })\n                                ])\n                              ])\n                            : _vm._e()\n                        ])\n                      }),\n                      0\n                    )\n                  : _vm._e()\n              ])\n            : _vm._e(),\n          _vm.selectedType === \"SINGLE_CHOICE\"\n            ? _c(\n                \"div\",\n                {},\n                [\n                  _c(\"div\", { staticClass: \"vsb-choices-text\" }, [\n                    _vm._v(\"Answer Choices\")\n                  ]),\n                  _vm._l(_vm.question.options, function(option, index) {\n                    return _c(\"div\", { key: index }, [\n                      _c(\"div\", { staticClass: \"clear-both\" }, [\n                        _c(\"input\", {\n                          directives: [\n                            {\n                              name: \"model\",\n                              rawName: \"v-model\",\n                              value: option.body,\n                              expression: \"option.body\"\n                            }\n                          ],\n                          staticClass: \"width-90 float-left\",\n                          attrs: {\n                            type: \"text\",\n                            placeholder: \"Enter an answer choice\"\n                          },\n                          domProps: { value: option.body },\n                          on: {\n                            input: function($event) {\n                              if ($event.target.composing) {\n                                return\n                              }\n                              _vm.$set(option, \"body\", $event.target.value)\n                            }\n                          }\n                        }),\n                        index > 1\n                          ? _c(\n                              \"button\",\n                              {\n                                staticClass:\n                                  \"vsb-btn-link color-red width-10 mt-10\",\n                                on: {\n                                  click: function($event) {\n                                    return _vm.deleteQuestionOptionItem(\n                                      _vm.question.options,\n                                      index\n                                    )\n                                  }\n                                }\n                              },\n                              [_vm._v(\"Remove\")]\n                            )\n                          : _vm._e()\n                      ])\n                    ])\n                  }),\n                  _c(\"div\", { staticClass: \"display-block\" }, [\n                    _c(\n                      \"button\",\n                      {\n                        staticClass: \"vsb-btn-link color-blue\",\n                        on: {\n                          click: function($event) {\n                            return _vm.addAnotherAnswer()\n                          }\n                        }\n                      },\n                      [_vm._v(\"Add another answer\")]\n                    )\n                  ])\n                ],\n                2\n              )\n            : _vm._e(),\n          _vm.selectedType === \"TEXT\"\n            ? _c(\"div\", {}, [\n                _c(\"label\", {}, [\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.question.characterLimited,\n                        expression: \"question.characterLimited\"\n                      }\n                    ],\n                    attrs: { type: \"checkbox\", name: \"characterLimited\" },\n                    domProps: {\n                      checked: Array.isArray(_vm.question.characterLimited)\n                        ? _vm._i(_vm.question.characterLimited, null) > -1\n                        : _vm.question.characterLimited\n                    },\n                    on: {\n                      change: function($event) {\n                        var $$a = _vm.question.characterLimited,\n                          $$el = $event.target,\n                          $$c = $$el.checked ? true : false\n                        if (Array.isArray($$a)) {\n                          var $$v = null,\n                            $$i = _vm._i($$a, $$v)\n                          if ($$el.checked) {\n                            $$i < 0 &&\n                              _vm.$set(\n                                _vm.question,\n                                \"characterLimited\",\n                                $$a.concat([$$v])\n                              )\n                          } else {\n                            $$i > -1 &&\n                              _vm.$set(\n                                _vm.question,\n                                \"characterLimited\",\n                                $$a.slice(0, $$i).concat($$a.slice($$i + 1))\n                              )\n                          }\n                        } else {\n                          _vm.$set(_vm.question, \"characterLimited\", $$c)\n                        }\n                      }\n                    }\n                  }),\n                  _c(\"span\", {}, [\n                    _vm._v(\"Character limit \"),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.question.textLimit,\n                          expression: \"question.textLimit\"\n                        }\n                      ],\n                      staticClass: \"char-limit-input\",\n                      attrs: {\n                        type: \"number\",\n                        placeholder: \"\",\n                        min: \"1\",\n                        max: \"2048\",\n                        disabled: !_vm.question.characterLimited\n                      },\n                      domProps: { value: _vm.question.textLimit },\n                      on: {\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.$set(\n                            _vm.question,\n                            \"textLimit\",\n                            $event.target.value\n                          )\n                        }\n                      }\n                    })\n                  ])\n                ])\n              ])\n            : _vm._e(),\n          _vm.selectedType === \"TIME\"\n            ? _c(\"div\", {}, [\n                _c(\"div\", {}, [\n                  _c(\"label\", {}, [\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.question.timeFormat,\n                          expression: \"question.timeFormat\"\n                        }\n                      ],\n                      attrs: { type: \"radio\", value: \"12\" },\n                      domProps: {\n                        checked: _vm._q(_vm.question.timeFormat, \"12\")\n                      },\n                      on: {\n                        click: function($event) {\n                          return _vm.timeFormatModified(_vm.question.timeFormat)\n                        },\n                        change: function($event) {\n                          return _vm.$set(_vm.question, \"timeFormat\", \"12\")\n                        }\n                      }\n                    }),\n                    _vm._v(\" 12 hrs\")\n                  ]),\n                  _c(\"label\", {}, [\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.question.timeFormat,\n                          expression: \"question.timeFormat\"\n                        }\n                      ],\n                      attrs: { type: \"radio\", value: \"24\" },\n                      domProps: {\n                        checked: _vm._q(_vm.question.timeFormat, \"24\")\n                      },\n                      on: {\n                        click: function($event) {\n                          return _vm.timeFormatModified(_vm.question.timeFormat)\n                        },\n                        change: function($event) {\n                          return _vm.$set(_vm.question, \"timeFormat\", \"24\")\n                        }\n                      }\n                    }),\n                    _vm._v(\" 24 hrs\")\n                  ])\n                ])\n              ])\n            : _vm._e(),\n          _c(\"div\", { staticClass: \"buttons-section\" }, [\n            _c(\n              \"button\",\n              {\n                staticClass: \"vsb-btn-link mr-10 color-green\",\n                attrs: { type: \"button\" },\n                on: {\n                  click: function($event) {\n                    return _vm.saveQuestion(_vm.question)\n                  }\n                }\n              },\n              [_vm._v(\"Save\")]\n            ),\n            _c(\n              \"button\",\n              {\n                staticClass: \"vsb-btn-link mr-10 color-blue\",\n                attrs: { type: \"button\" },\n                on: {\n                  click: function($event) {\n                    return _vm.cancelQuestion(_vm.question)\n                  }\n                }\n              },\n              [_vm._v(\"Cancel\")]\n            )\n          ])\n        ])\n      : _vm._e()\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}