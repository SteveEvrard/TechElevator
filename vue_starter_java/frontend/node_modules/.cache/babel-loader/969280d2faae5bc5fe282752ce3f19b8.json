{"remainingRequest":"/Users/eford/Development/final-capstone-team-hotel/vue_starter_java/frontend/node_modules/babel-loader/lib/index.js!/Users/eford/Development/final-capstone-team-hotel/vue_starter_java/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/eford/Development/final-capstone-team-hotel/vue_starter_java/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eford/Development/final-capstone-team-hotel/vue_starter_java/frontend/node_modules/vue2-timepicker/src/vue-timepicker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/eford/Development/final-capstone-team-hotel/vue_starter_java/frontend/node_modules/vue2-timepicker/src/vue-timepicker.vue","mtime":1478871003000},{"path":"/Users/eford/Development/final-capstone-team-hotel/vue_starter_java/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eford/Development/final-capstone-team-hotel/vue_starter_java/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/eford/Development/final-capstone-team-hotel/vue_starter_java/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eford/Development/final-capstone-team-hotel/vue_starter_java/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.index-of\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.number.constructor\";\nvar CONFIG = {\n  HOUR_TOKENS: ['HH', 'H', 'hh', 'h', 'kk', 'k'],\n  MINUTE_TOKENS: ['mm', 'm'],\n  SECOND_TOKENS: ['ss', 's'],\n  APM_TOKENS: ['A', 'a']\n};\nexport default {\n  name: 'VueTimepicker',\n  props: {\n    value: {\n      type: Object\n    },\n    hideClearButton: {\n      type: Boolean\n    },\n    format: {\n      type: String\n    },\n    minuteInterval: {\n      type: Number\n    },\n    secondInterval: {\n      type: Number\n    },\n    id: {\n      type: String\n    }\n  },\n  data: function data() {\n    return {\n      hours: [],\n      minutes: [],\n      seconds: [],\n      apms: [],\n      showDropdown: false,\n      muteWatch: false,\n      hourType: 'HH',\n      minuteType: 'mm',\n      secondType: '',\n      apmType: '',\n      hour: '',\n      minute: '',\n      second: '',\n      apm: '',\n      fullValues: undefined\n    };\n  },\n  computed: {\n    displayTime: function displayTime() {\n      var formatString = String(this.format || 'HH:mm');\n\n      if (this.hour) {\n        formatString = formatString.replace(new RegExp(this.hourType, 'g'), this.hour);\n      }\n\n      if (this.minute) {\n        formatString = formatString.replace(new RegExp(this.minuteType, 'g'), this.minute);\n      }\n\n      if (this.second && this.secondType) {\n        formatString = formatString.replace(new RegExp(this.secondType, 'g'), this.second);\n      }\n\n      if (this.apm && this.apmType) {\n        formatString = formatString.replace(new RegExp(this.apmType, 'g'), this.apm);\n      }\n\n      return formatString;\n    },\n    showClearBtn: function showClearBtn() {\n      if (this.hour && this.hour !== '' || this.minute && this.minute !== '') {\n        return true;\n      }\n\n      return false;\n    }\n  },\n  watch: {\n    'format': 'renderFormat',\n    minuteInterval: function minuteInterval(newInteval) {\n      this.renderList('minute', newInteval);\n    },\n    secondInterval: function secondInterval(newInteval) {\n      this.renderList('second', newInteval);\n    },\n    'value': 'readValues',\n    'displayTime': 'fillValues'\n  },\n  methods: {\n    formatValue: function formatValue(type, i) {\n      switch (type) {\n        case 'H':\n        case 'm':\n        case 's':\n          return String(i);\n\n        case 'HH':\n        case 'mm':\n        case 'ss':\n          return i < 10 ? \"0\".concat(i) : String(i);\n\n        case 'h':\n        case 'k':\n          return String(i + 1);\n\n        case 'hh':\n        case 'kk':\n          return i + 1 < 10 ? \"0\".concat(i + 1) : String(i + 1);\n\n        default:\n          return '';\n      }\n    },\n    checkAcceptingType: function checkAcceptingType(validValues, formatString, fallbackValue) {\n      if (!validValues || !formatString || !formatString.length) {\n        return '';\n      }\n\n      for (var i = 0; i < validValues.length; i++) {\n        if (formatString.indexOf(validValues[i]) > -1) {\n          return validValues[i];\n        }\n      }\n\n      return fallbackValue || '';\n    },\n    renderFormat: function renderFormat(newFormat) {\n      newFormat = newFormat || this.format;\n\n      if (!newFormat || !newFormat.length) {\n        newFormat = 'HH:mm';\n      }\n\n      this.hourType = this.checkAcceptingType(CONFIG.HOUR_TOKENS, newFormat, 'HH');\n      this.minuteType = this.checkAcceptingType(CONFIG.MINUTE_TOKENS, newFormat, 'mm');\n      this.secondType = this.checkAcceptingType(CONFIG.SECOND_TOKENS, newFormat);\n      this.apmType = this.checkAcceptingType(CONFIG.APM_TOKENS, newFormat);\n      this.renderHoursList();\n      this.renderList('minute');\n\n      if (this.secondType) {\n        this.renderList('second');\n      }\n\n      if (this.apmType) {\n        this.renderApmList();\n      }\n\n      var self = this;\n      this.$nextTick(function () {\n        self.readValues();\n      });\n    },\n    renderHoursList: function renderHoursList() {\n      var hoursCount = this.hourType === 'h' || this.hourType === 'hh' ? 12 : 24;\n      this.hours = [];\n\n      for (var i = 0; i < hoursCount; i++) {\n        this.hours.push(this.formatValue(this.hourType, i));\n      }\n    },\n    renderList: function renderList(listType, interval) {\n      if (listType === 'second') {\n        interval = interval || this.secondInterval;\n      } else if (listType === 'minute') {\n        interval = interval || this.minuteInterval;\n      } else {\n        return;\n      }\n\n      if (interval === 0) {\n        interval = 60;\n      } else if (interval > 60) {\n        window.console.warn('`' + listType + '-interval` should be less than 60. Current value is', interval);\n        interval = 1;\n      } else if (interval < 1) {\n        window.console.warn('`' + listType + '-interval` should be NO less than 1. Current value is', interval);\n        interval = 1;\n      } else if (!interval) {\n        interval = 1;\n      }\n\n      if (listType === 'minute') {\n        this.minutes = [];\n      } else {\n        this.seconds = [];\n      }\n\n      for (var i = 0; i < 60; i += interval) {\n        if (listType === 'minute') {\n          this.minutes.push(this.formatValue(this.minuteType, i));\n        } else {\n          this.seconds.push(this.formatValue(this.secondType, i));\n        }\n      }\n    },\n    renderApmList: function renderApmList() {\n      this.apms = [];\n\n      if (!this.apmType) {\n        return;\n      }\n\n      this.apms = this.apmType === 'A' ? ['AM', 'PM'] : ['am', 'pm'];\n    },\n    readValues: function readValues() {\n      if (!this.value || this.muteWatch) {\n        return;\n      }\n\n      var timeValue = JSON.parse(JSON.stringify(this.value || {}));\n      var values = Object.keys(timeValue);\n\n      if (values.length === 0) {\n        return;\n      }\n\n      if (values.indexOf(this.hourType) > -1) {\n        this.hour = timeValue[this.hourType];\n      }\n\n      if (values.indexOf(this.minuteType) > -1) {\n        this.minute = timeValue[this.minuteType];\n      }\n\n      if (values.indexOf(this.secondType) > -1) {\n        this.second = timeValue[this.secondType];\n      } else {\n        this.second = 0;\n      }\n\n      if (values.indexOf(this.apmType) > -1) {\n        this.apm = timeValue[this.apmType];\n      }\n\n      this.fillValues();\n    },\n    fillValues: function fillValues() {\n      var fullValues = {};\n      var baseHour = this.hour;\n      var baseHourType = this.hourType;\n      var hourValue = baseHour || baseHour === 0 ? Number(baseHour) : '';\n      var baseOnTwelveHours = this.isTwelveHours(baseHourType);\n      var apmValue = baseOnTwelveHours && this.apm ? String(this.apm).toLowerCase() : false;\n      CONFIG.HOUR_TOKENS.forEach(function (token) {\n        if (token === baseHourType) {\n          fullValues[token] = baseHour;\n          return;\n        }\n\n        var value;\n        var apm;\n\n        switch (token) {\n          case 'H':\n          case 'HH':\n            if (!String(hourValue).length) {\n              fullValues[token] = '';\n              return;\n            } else if (baseOnTwelveHours) {\n              if (apmValue === 'pm') {\n                value = hourValue < 12 ? hourValue + 12 : hourValue;\n              } else {\n                value = hourValue % 12;\n              }\n            } else {\n              value = hourValue % 24;\n            }\n\n            fullValues[token] = token === 'HH' && value < 10 ? \"0\".concat(value) : String(value);\n            break;\n\n          case 'k':\n          case 'kk':\n            if (!String(hourValue).length) {\n              fullValues[token] = '';\n              return;\n            } else if (baseOnTwelveHours) {\n              if (apmValue === 'pm') {\n                value = hourValue < 12 ? hourValue + 12 : hourValue;\n              } else {\n                value = hourValue === 12 ? 24 : hourValue;\n              }\n            } else {\n              value = hourValue === 0 ? 24 : hourValue;\n            }\n\n            fullValues[token] = token === 'kk' && value < 10 ? \"0\".concat(value) : String(value);\n            break;\n\n          case 'h':\n          case 'hh':\n            if (apmValue) {\n              value = hourValue;\n              apm = apmValue || 'am';\n            } else {\n              if (!String(hourValue).length) {\n                fullValues[token] = '';\n                fullValues.a = '';\n                fullValues.A = '';\n                return;\n              } else if (hourValue > 11) {\n                apm = 'pm';\n                value = hourValue === 12 ? 12 : hourValue % 12;\n              } else {\n                if (baseOnTwelveHours) {\n                  apm = '';\n                } else {\n                  apm = 'am';\n                }\n\n                value = hourValue % 12 === 0 ? 12 : hourValue;\n              }\n            }\n\n            fullValues[token] = token === 'hh' && value < 10 ? \"0\".concat(value) : String(value);\n            fullValues.a = apm;\n            fullValues.A = apm.toUpperCase();\n            break;\n        }\n      });\n\n      if (this.minute || this.minute === 0) {\n        var minuteValue = Number(this.minute);\n        fullValues.m = String(minuteValue);\n        fullValues.mm = minuteValue < 10 ? \"0\".concat(minuteValue) : String(minuteValue);\n      } else {\n        fullValues.m = '';\n        fullValues.mm = '';\n      }\n\n      if (this.second || this.second === 0) {\n        var secondValue = Number(this.second);\n        fullValues.s = String(secondValue);\n        fullValues.ss = secondValue < 10 ? \"0\".concat(secondValue) : String(secondValue);\n      } else {\n        fullValues.s = '';\n        fullValues.ss = '';\n      }\n\n      this.fullValues = fullValues;\n      this.updateTimeValue(fullValues);\n      this.$emit('change', {\n        data: fullValues\n      });\n    },\n    updateTimeValue: function updateTimeValue(fullValues) {\n      this.muteWatch = true;\n      var self = this;\n      var baseTimeValue = JSON.parse(JSON.stringify(this.value || {}));\n      var timeValue = {};\n      Object.keys(baseTimeValue).forEach(function (key) {\n        timeValue[key] = fullValues[key];\n      });\n      this.$emit('input', timeValue);\n      this.$nextTick(function () {\n        self.muteWatch = false;\n      });\n    },\n    isTwelveHours: function isTwelveHours(token) {\n      return token === 'h' || token === 'hh';\n    },\n    toggleDropdown: function toggleDropdown() {\n      this.showDropdown = !this.showDropdown;\n    },\n    select: function select(type, value) {\n      if (type === 'hour') {\n        this.hour = value;\n      } else if (type === 'minute') {\n        this.minute = value;\n      } else if (type === 'second') {\n        this.second = value;\n      } else if (type === 'apm') {\n        this.apm = value;\n      }\n    },\n    clearTime: function clearTime() {\n      this.hour = '';\n      this.minute = '';\n      this.second = '';\n      this.apm = '';\n    }\n  },\n  mounted: function mounted() {\n    this.renderFormat();\n  }\n};",{"version":3,"sources":["vue-timepicker.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\nconst CONFIG = {\n  HOUR_TOKENS: ['HH', 'H', 'hh', 'h', 'kk', 'k'],\n  MINUTE_TOKENS: ['mm', 'm'],\n  SECOND_TOKENS: ['ss', 's'],\n  APM_TOKENS: ['A', 'a']\n}\n\nexport default {\n  name: 'VueTimepicker',\n\n  props: {\n    value: {type: Object},\n    hideClearButton: {type: Boolean},\n    format: {type: String},\n    minuteInterval: {type: Number},\n    secondInterval: {type: Number},\n    id: {type: String}\n  },\n\n  data () {\n    return {\n      hours: [],\n      minutes: [],\n      seconds: [],\n      apms: [],\n      showDropdown: false,\n      muteWatch: false,\n      hourType: 'HH',\n      minuteType: 'mm',\n      secondType: '',\n      apmType: '',\n      hour: '',\n      minute: '',\n      second: '',\n      apm: '',\n      fullValues: undefined\n    }\n  },\n\n  computed: {\n    displayTime () {\n      let formatString = String((this.format || 'HH:mm'))\n      if (this.hour) {\n        formatString = formatString.replace(new RegExp(this.hourType, 'g'), this.hour)\n      }\n      if (this.minute) {\n        formatString = formatString.replace(new RegExp(this.minuteType, 'g'), this.minute)\n      }\n      if (this.second && this.secondType) {\n        formatString = formatString.replace(new RegExp(this.secondType, 'g'), this.second)\n      }\n      if (this.apm && this.apmType) {\n        formatString = formatString.replace(new RegExp(this.apmType, 'g'), this.apm)\n      }\n      return formatString\n    },\n    showClearBtn () {\n      if ((this.hour && this.hour !== '') || (this.minute && this.minute !== '')) {\n        return true\n      }\n      return false\n    }\n  },\n\n  watch: {\n    'format': 'renderFormat',\n    minuteInterval (newInteval) {\n      this.renderList('minute', newInteval)\n    },\n    secondInterval (newInteval) {\n      this.renderList('second', newInteval)\n    },\n    'value': 'readValues',\n    'displayTime': 'fillValues'\n  },\n\n  methods: {\n    formatValue (type, i) {\n      switch (type) {\n        case 'H':\n        case 'm':\n        case 's':\n          return String(i)\n        case 'HH':\n        case 'mm':\n        case 'ss':\n          return i < 10 ? `0${i}` : String(i)\n        case 'h':\n        case 'k':\n          return String(i + 1)\n        case 'hh':\n        case 'kk':\n          return (i + 1) < 10 ? `0${i + 1}` : String(i + 1)\n        default:\n          return ''\n      }\n    },\n\n    checkAcceptingType (validValues, formatString, fallbackValue) {\n      if (!validValues || !formatString || !formatString.length) { return '' }\n      for (let i = 0; i < validValues.length; i++) {\n        if (formatString.indexOf(validValues[i]) > -1) {\n          return validValues[i]\n        }\n      }\n      return fallbackValue || ''\n    },\n\n    renderFormat (newFormat) {\n      newFormat = newFormat || this.format\n      if (!newFormat || !newFormat.length) {\n        newFormat = 'HH:mm'\n      }\n\n      this.hourType = this.checkAcceptingType(CONFIG.HOUR_TOKENS, newFormat, 'HH')\n      this.minuteType = this.checkAcceptingType(CONFIG.MINUTE_TOKENS, newFormat, 'mm')\n      this.secondType = this.checkAcceptingType(CONFIG.SECOND_TOKENS, newFormat)\n      this.apmType = this.checkAcceptingType(CONFIG.APM_TOKENS, newFormat)\n\n      this.renderHoursList()\n      this.renderList('minute')\n\n      if (this.secondType) {\n        this.renderList('second')\n      }\n\n      if (this.apmType) {\n        this.renderApmList()\n      }\n\n      const self = this\n      this.$nextTick(() => {\n        self.readValues()\n      })\n    },\n\n    renderHoursList () {\n      const hoursCount = (this.hourType === 'h' || this.hourType === 'hh') ? 12 : 24\n      this.hours = []\n      for (let i = 0; i < hoursCount; i++) {\n        this.hours.push(this.formatValue(this.hourType, i))\n      }\n    },\n\n    renderList (listType, interval) {\n      if (listType === 'second') {\n        interval = interval || this.secondInterval\n      } else if (listType === 'minute') {\n        interval = interval || this.minuteInterval\n      } else {\n        return\n      }\n\n      if (interval === 0) {\n        interval = 60\n      } else if (interval > 60) {\n        window.console.warn('`' + listType + '-interval` should be less than 60. Current value is', interval)\n        interval = 1\n      } else if (interval < 1) {\n        window.console.warn('`' + listType + '-interval` should be NO less than 1. Current value is', interval)\n        interval = 1\n      } else if (!interval) {\n        interval = 1\n      }\n\n      if (listType === 'minute') {\n        this.minutes = []\n      } else {\n        this.seconds = []\n      }\n\n      for (let i = 0; i < 60; i += interval) {\n        if (listType === 'minute') {\n          this.minutes.push(this.formatValue(this.minuteType, i))\n        } else {\n          this.seconds.push(this.formatValue(this.secondType, i))\n        }\n      }\n    },\n\n    renderApmList () {\n      this.apms = []\n      if (!this.apmType) { return }\n      this.apms = this.apmType === 'A' ? ['AM', 'PM'] : ['am', 'pm']\n    },\n\n    readValues () {\n      if (!this.value || this.muteWatch) { return }\n\n      const timeValue = JSON.parse(JSON.stringify(this.value || {}))\n\n      const values = Object.keys(timeValue)\n      if (values.length === 0) { return }\n\n      if (values.indexOf(this.hourType) > -1) {\n        this.hour = timeValue[this.hourType]\n      }\n\n      if (values.indexOf(this.minuteType) > -1) {\n        this.minute = timeValue[this.minuteType]\n      }\n\n      if (values.indexOf(this.secondType) > -1) {\n        this.second = timeValue[this.secondType]\n      } else {\n        this.second = 0\n      }\n\n      if (values.indexOf(this.apmType) > -1) {\n        this.apm = timeValue[this.apmType]\n      }\n\n      this.fillValues()\n    },\n\n    fillValues () {\n      let fullValues = {}\n\n      const baseHour = this.hour\n      const baseHourType = this.hourType\n\n      const hourValue = baseHour || baseHour === 0 ? Number(baseHour) : ''\n      const baseOnTwelveHours = this.isTwelveHours(baseHourType)\n      const apmValue = (baseOnTwelveHours && this.apm) ? String(this.apm).toLowerCase() : false\n\n      CONFIG.HOUR_TOKENS.forEach((token) => {\n        if (token === baseHourType) {\n          fullValues[token] = baseHour\n          return\n        }\n\n        let value\n        let apm\n        switch (token) {\n          case 'H':\n          case 'HH':\n            if (!String(hourValue).length) {\n              fullValues[token] = ''\n              return\n            } else if (baseOnTwelveHours) {\n              if (apmValue === 'pm') {\n                value = hourValue < 12 ? hourValue + 12 : hourValue\n              } else {\n                value = hourValue % 12\n              }\n            } else {\n              value = hourValue % 24\n            }\n            fullValues[token] = (token === 'HH' && value < 10) ? `0${value}` : String(value)\n            break\n          case 'k':\n          case 'kk':\n            if (!String(hourValue).length) {\n              fullValues[token] = ''\n              return\n            } else if (baseOnTwelveHours) {\n              if (apmValue === 'pm') {\n                value = hourValue < 12 ? hourValue + 12 : hourValue\n              } else {\n                value = hourValue === 12 ? 24 : hourValue\n              }\n            } else {\n              value = hourValue === 0 ? 24 : hourValue\n            }\n            fullValues[token] = (token === 'kk' && value < 10) ? `0${value}` : String(value)\n            break\n          case 'h':\n          case 'hh':\n            if (apmValue) {\n              value = hourValue\n              apm = apmValue || 'am'\n            } else {\n              if (!String(hourValue).length) {\n                fullValues[token] = ''\n                fullValues.a = ''\n                fullValues.A = ''\n                return\n              } else if (hourValue > 11) {\n                apm = 'pm'\n                value = hourValue === 12 ? 12 : hourValue % 12\n              } else {\n                if (baseOnTwelveHours) {\n                  apm = ''\n                } else {\n                  apm = 'am'\n                }\n                value = hourValue % 12 === 0 ? 12 : hourValue\n              }\n            }\n            fullValues[token] = (token === 'hh' && value < 10) ? `0${value}` : String(value)\n            fullValues.a = apm\n            fullValues.A = apm.toUpperCase()\n            break\n        }\n      })\n\n      if (this.minute || this.minute === 0) {\n        const minuteValue = Number(this.minute)\n        fullValues.m = String(minuteValue)\n        fullValues.mm = minuteValue < 10 ? `0${minuteValue}` : String(minuteValue)\n      } else {\n        fullValues.m = ''\n        fullValues.mm = ''\n      }\n\n      if (this.second || this.second === 0) {\n        const secondValue = Number(this.second)\n        fullValues.s = String(secondValue)\n        fullValues.ss = secondValue < 10 ? `0${secondValue}` : String(secondValue)\n      } else {\n        fullValues.s = ''\n        fullValues.ss = ''\n      }\n\n      this.fullValues = fullValues\n      this.updateTimeValue(fullValues)\n      this.$emit('change', {data: fullValues})\n    },\n\n    updateTimeValue (fullValues) {\n      this.muteWatch = true\n\n      const self = this\n\n      const baseTimeValue = JSON.parse(JSON.stringify(this.value || {}))\n      let timeValue = {}\n\n      Object.keys(baseTimeValue).forEach((key) => {\n        timeValue[key] = fullValues[key]\n      })\n\n      this.$emit('input', timeValue)\n\n      this.$nextTick(() => {\n        self.muteWatch = false\n      })\n    },\n\n    isTwelveHours (token) {\n      return token === 'h' || token === 'hh'\n    },\n\n    toggleDropdown () {\n      this.showDropdown = !this.showDropdown\n    },\n\n    select (type, value) {\n      if (type === 'hour') {\n        this.hour = value\n      } else if (type === 'minute') {\n        this.minute = value\n      } else if (type === 'second') {\n        this.second = value\n      } else if (type === 'apm') {\n        this.apm = value\n      }\n    },\n\n    clearTime () {\n      this.hour = ''\n      this.minute = ''\n      this.second = ''\n      this.apm = ''\n    }\n  },\n\n  mounted () {\n    this.renderFormat()\n  }\n}\n</script>\n\n<template>\n<span class=\"time-picker\">\n  <input class=\"display-time\" :id=\"id\" v-model=\"displayTime\" @click.stop=\"toggleDropdown\" type=\"text\" readonly />\n  <span class=\"clear-btn\" v-if=\"!hideClearButton\" v-show=\"!showDropdown && showClearBtn\" @click.stop=\"clearTime\">&times;</span>\n  <div class=\"time-picker-overlay\" v-if=\"showDropdown\" @click.stop=\"toggleDropdown\"></div>\n  <div class=\"dropdown\" v-show=\"showDropdown\">\n    <div class=\"select-list\">\n      <ul class=\"hours\">\n        <li class=\"hint\" v-text=\"hourType\"></li>\n        <li v-for=\"hr in hours\" v-text=\"hr\" :class=\"{active: hour === hr}\" @click.stop=\"select('hour', hr)\"></li>\n      </ul>\n      <ul class=\"minutes\">\n        <li class=\"hint\" v-text=\"minuteType\"></li>\n        <li v-for=\"m in minutes\" v-text=\"m\" :class=\"{active: minute === m}\" @click.stop=\"select('minute', m)\"></li>\n      </ul>\n      <ul class=\"seconds\" v-if=\"secondType\">\n        <li class=\"hint\" v-text=\"secondType\"></li>\n        <li v-for=\"s in seconds\" v-text=\"s\" :class=\"{active: second === s}\" @click.stop=\"select('second', s)\"></li>\n      </ul>\n      <ul class=\"apms\" v-if=\"apmType\">\n        <li class=\"hint\" v-text=\"apmType\"></li>\n        <li v-for=\"a in apms\" v-text=\"a\" :class=\"{active: apm === a}\" @click.stop=\"select('apm', a)\"></li>\n      </ul>\n    </div>\n  </div>\n</span>\n</template>\n\n<style>\n@import './style/vue-timepicker.css';\n</style>\n"],"sourceRoot":"node_modules/vue2-timepicker/src"}]}