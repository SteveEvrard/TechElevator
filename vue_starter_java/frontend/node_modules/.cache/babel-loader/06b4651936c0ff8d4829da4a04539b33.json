{"remainingRequest":"/Users/ztrembly/Development/final-capstone-team-hotel/vue_starter_java/frontend/node_modules/babel-loader/lib/index.js!/Users/ztrembly/Development/final-capstone-team-hotel/vue_starter_java/frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/ztrembly/Development/final-capstone-team-hotel/vue_starter_java/frontend/src/router.js","dependencies":[{"path":"/Users/ztrembly/Development/final-capstone-team-hotel/vue_starter_java/frontend/src/router.js","mtime":1565567802623},{"path":"/Users/ztrembly/Development/final-capstone-team-hotel/vue_starter_java/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ztrembly/Development/final-capstone-team-hotel/vue_starter_java/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ztrembly/Development/final-capstone-team-hotel/vue_starter_java/frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.some\";\nimport Vue from 'vue';\nimport Router from 'vue-router';\nimport auth from \"./auth\";\nimport Home from \"./views/Home.vue\";\nimport Login from \"./views/Login.vue\";\nimport Register from \"./views/Register.vue\";\nimport CreateEvent from \"./views/CreateEvent.vue\";\nimport RatingResults from \"./views/RatingResults.vue\";\nimport EventResponse from \"./views/EventResponse.vue\";\nimport EventPage from \"./views/EventPage.vue\";\nVue.use(Router);\n\nfunction routeEventPage(route) {\n  return {\n    name: parseLong(route.params.eventId)\n  };\n}\n/**\n * The Vue Router is used to \"direct\" the browser to render a specific view component\n * inside of App.vue depending on the URL.\n *\n * It also is used to detect whether or not a route requires the user to have first authenticated.\n * If the user has not yet authenticated (and needs to) they are redirected to /login\n * If they have (or don't need to) they're allowed to go about their way.\n */\n\n\nvar router = new Router({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes: [{\n    path: '/',\n    name: 'home',\n    component: Home,\n    meta: {\n      requiresAuth: false\n    }\n  }, {\n    path: \"/login\",\n    name: \"login\",\n    component: Login,\n    meta: {\n      requiresAuth: false\n    }\n  }, {\n    path: \"/register\",\n    name: \"register\",\n    component: Register,\n    meta: {\n      requiresAuth: false\n    }\n  }, {\n    path: \"/createEvent\",\n    name: \"createEvent\",\n    component: CreateEvent,\n    meta: {\n      requiresAuth: false\n    }\n  }, {\n    path: \"/ratingResults\",\n    name: \"ratingResults\",\n    component: RatingResults,\n    meta: {\n      requiresAuth: false\n    }\n  }, {\n    path: \"/eventResponse\",\n    name: \"eventResponse\",\n    component: EventResponse,\n    meta: {\n      requiresAuth: false\n    }\n  }, {\n    path: \"/eventPage/:eventId\",\n    // path: \"/eventPage\",\n    name: \"eventPage\",\n    component: EventPage,\n    props: routeEventPage,\n    meta: {\n      requiresAuth: false\n    }\n  }]\n});\nrouter.beforeEach(function (to, from, next) {\n  // Determine if the route requires Authentication\n  var requiresAuth = to.matched.some(function (x) {\n    return x.meta.requiresAuth;\n  });\n  var user = auth.getUser(); // If it does and they are not logged in, send the user to \"/login\"\n\n  if (requiresAuth && !user) {\n    next(\"/login\");\n  } else {\n    // Else let them go to their next destination\n    next();\n  }\n});\nexport default router;",{"version":3,"sources":["/Users/ztrembly/Development/final-capstone-team-hotel/vue_starter_java/frontend/src/router.js"],"names":["Vue","Router","auth","Home","Login","Register","CreateEvent","RatingResults","EventResponse","EventPage","use","routeEventPage","route","name","parseLong","params","eventId","router","mode","base","process","env","BASE_URL","routes","path","component","meta","requiresAuth","props","beforeEach","to","from","next","matched","some","x","user","getUser"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,IAAP;AACA,OAAOC,IAAP;AACA,OAAOC,KAAP;AACA,OAAOC,QAAP;AACA,OAAOC,WAAP;AACA,OAAOC,aAAP;AACA,OAAOC,aAAP;AACA,OAAOC,SAAP;AAGAT,GAAG,CAACU,GAAJ,CAAQT,MAAR;;AAEA,SAASU,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAGC,SAAS,CAACF,KAAK,CAACG,MAAN,CAAaC,OAAd;AADX,GAAP;AAGD;AAED;;;;;;;;;;AASA,IAAMC,MAAM,GAAG,IAAIhB,MAAJ,CAAW;AACxBiB,EAAAA,IAAI,EAAE,SADkB;AAExBC,EAAAA,IAAI,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAFM;AAGxBC,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,IAAI,EAAE,GADR;AAEEX,IAAAA,IAAI,EAAE,MAFR;AAGEY,IAAAA,SAAS,EAAEtB,IAHb;AAIEuB,IAAAA,IAAI,EAAE;AACJC,MAAAA,YAAY,EAAE;AADV;AAJR,GADM,EASN;AACEH,IAAAA,IAAI,EAAE,QADR;AAEEX,IAAAA,IAAI,EAAE,OAFR;AAGEY,IAAAA,SAAS,EAAErB,KAHb;AAIEsB,IAAAA,IAAI,EAAE;AACJC,MAAAA,YAAY,EAAE;AADV;AAJR,GATM,EAiBN;AACEH,IAAAA,IAAI,EAAE,WADR;AAEEX,IAAAA,IAAI,EAAE,UAFR;AAGEY,IAAAA,SAAS,EAAEpB,QAHb;AAIEqB,IAAAA,IAAI,EAAE;AACJC,MAAAA,YAAY,EAAE;AADV;AAJR,GAjBM,EAyBN;AACEH,IAAAA,IAAI,EAAE,cADR;AAEEX,IAAAA,IAAI,EAAE,aAFR;AAGEY,IAAAA,SAAS,EAAEnB,WAHb;AAIEoB,IAAAA,IAAI,EAAE;AACJC,MAAAA,YAAY,EAAE;AADV;AAJR,GAzBM,EAiCN;AACEH,IAAAA,IAAI,EAAE,gBADR;AAEEX,IAAAA,IAAI,EAAE,eAFR;AAGEY,IAAAA,SAAS,EAAElB,aAHb;AAIEmB,IAAAA,IAAI,EAAE;AACJC,MAAAA,YAAY,EAAE;AADV;AAJR,GAjCM,EAyCN;AACEH,IAAAA,IAAI,EAAE,gBADR;AAEEX,IAAAA,IAAI,EAAE,eAFR;AAGEY,IAAAA,SAAS,EAAEjB,aAHb;AAIEkB,IAAAA,IAAI,EAAE;AACJC,MAAAA,YAAY,EAAE;AADV;AAJR,GAzCM,EAiDN;AACEH,IAAAA,IAAI,EAAE,qBADR;AAEE;AACAX,IAAAA,IAAI,EAAE,WAHR;AAIEY,IAAAA,SAAS,EAAEhB,SAJb;AAKEmB,IAAAA,KAAK,EAAEjB,cALT;AAMEe,IAAAA,IAAI,EAAE;AACJC,MAAAA,YAAY,EAAE;AADV;AANR,GAjDM;AAHgB,CAAX,CAAf;AAiEAV,MAAM,CAACY,UAAP,CAAkB,UAACC,EAAD,EAAKC,IAAL,EAAWC,IAAX,EAAoB;AACpC;AACA,MAAML,YAAY,GAAGG,EAAE,CAACG,OAAH,CAAWC,IAAX,CAAgB,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACT,IAAF,CAAOC,YAAX;AAAA,GAAjB,CAArB;AACA,MAAMS,IAAI,GAAGlC,IAAI,CAACmC,OAAL,EAAb,CAHoC,CAKpC;;AACA,MAAIV,YAAY,IAAI,CAACS,IAArB,EAA2B;AACzBJ,IAAAA,IAAI,CAAC,QAAD,CAAJ;AACD,GAFD,MAEO;AACL;AACAA,IAAAA,IAAI;AACL;AACF,CAZD;AAcA,eAAef,MAAf","sourcesContent":["import Vue from 'vue'\nimport Router from 'vue-router'\nimport auth from './auth'\nimport Home from './views/Home.vue'\nimport Login from './views/Login.vue'\nimport Register from './views/Register.vue'\nimport CreateEvent from './views/CreateEvent.vue'\nimport RatingResults from './views/RatingResults.vue'\nimport EventResponse from './views/EventResponse.vue'\nimport EventPage from './views/EventPage.vue'\n\n\nVue.use(Router)\n\nfunction routeEventPage(route) {\n  return {\n    name: (parseLong(route.params.eventId))\n  }\n}\n\n/**\n * The Vue Router is used to \"direct\" the browser to render a specific view component\n * inside of App.vue depending on the URL.\n *\n * It also is used to detect whether or not a route requires the user to have first authenticated.\n * If the user has not yet authenticated (and needs to) they are redirected to /login\n * If they have (or don't need to) they're allowed to go about their way.\n */\n\nconst router = new Router({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes: [\n    {\n      path: '/',\n      name: 'home',\n      component: Home,\n      meta: {\n        requiresAuth: false\n      }\n    },\n    {\n      path: \"/login\",\n      name: \"login\",\n      component: Login,\n      meta: {\n        requiresAuth: false\n      }\n    },\n    {\n      path: \"/register\",\n      name: \"register\",\n      component: Register,\n      meta: {\n        requiresAuth: false\n      }\n    },\n    {\n      path: \"/createEvent\",\n      name: \"createEvent\",\n      component: CreateEvent,\n      meta: {\n        requiresAuth: false\n      }\n    },\n    {\n      path: \"/ratingResults\",\n      name: \"ratingResults\",\n      component: RatingResults,\n      meta: {\n        requiresAuth: false\n      }\n    },\n    {\n      path: \"/eventResponse\",\n      name: \"eventResponse\",\n      component: EventResponse,\n      meta: {\n        requiresAuth: false\n      }\n    },\n    {\n      path: \"/eventPage/:eventId\",\n      // path: \"/eventPage\",\n      name: \"eventPage\",\n      component: EventPage,\n      props: routeEventPage,\n      meta: {\n        requiresAuth: false\n      }\n    }\n  ]\n})\n\nrouter.beforeEach((to, from, next) => {\n  // Determine if the route requires Authentication\n  const requiresAuth = to.matched.some(x => x.meta.requiresAuth);\n  const user = auth.getUser();\n\n  // If it does and they are not logged in, send the user to \"/login\"\n  if (requiresAuth && !user) {\n    next(\"/login\");\n  } else {\n    // Else let them go to their next destination\n    next();\n  }\n});\n\nexport default router;\n"]}]}